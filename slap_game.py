from telegram import ParseMode, Update
from telegram.ext import Updater, CommandHandler
import redis_db
import re
from utils import in_whitelist, parse_userid
import random
import json
from datetime import datetime, timedelta, time

r = redis_db.connect()
SLAP_STATS_HASH = "slap_stats"
SS_HEALTH = "health"
SS_MADE_ACTION_DATE = "made_action_date"
SS_VULNERABLE_DATE = "vulnerable_date"
SS_TOTAL_SLAPS = "total_slaps"
SS_TOTAL_HEALS = "total_heals"
SS_TOTAL_PARRIES = "total_parries"
SS_TOTAL_PERFECT_PARRIES = "total_perfect_parries"
SS_LAST_SLAPPED_DATE = "last_slapped_date"
SS_LAST_SLAPPED_BY_USERID = "last_slapped_by_userid"

DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'
DEFAULT_HEALTH = 5


def get_slap_stats(user_id) -> dict:
    stats = r.hget(SLAP_STATS_HASH, str(user_id))
    if stats is None:
        return {}
    json_string = stats
    try:
        return json.loads(json_string)
    except:
        return {}


def is_cooldown_active(cooldown_start_date_str) -> bool:
    if cooldown_start_date_str is None:
        return False
    cur_datetime = datetime.now()

    cooldown_start_date_dt = datetime.strptime(
        cooldown_start_date_str, DATETIME_FORMAT)
    is_same_day = cur_datetime.year == cooldown_start_date_dt.year \
        and cur_datetime.month == cooldown_start_date_dt.month \
        and cur_datetime.day == cooldown_start_date_dt.day
    return is_same_day


def slap(update: Update, context):
    if (not in_whitelist(update)):
        return

    stats = get_slap_stats(update.message.from_user.id)
    if is_cooldown_active(stats.get(SS_MADE_ACTION_DATE)):
        update.message.reply_text(
            "–¢—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω /slap –∏–ª–∏ /heal –∑–∞ –¥–µ–Ω—å!", quote=True)
        return

    match = re.match(r'/[\S]+\s+(.+)', update.message.text)
    if (match == None):
        if update.message.reply_to_message is not None:
            user_id = update.message.reply_to_message.from_user.id
        else:
            update.message.reply_text("–ö–æ–≥–æ –±—É–¥–µ–º —à–ª–µ–ø–∞—Ç—å?", quote=False)
            return
    else:
        user_id = parse_userid(match.group(1), context)
    user_not_in_chat = False
    try:
        user_not_in_chat = user_id is not None and context.bot.get_chat_member(update.message.chat_id, user_id).status == 'left'
    except:
        user_not_in_chat = True

    if not user_id:
        update.message.reply_text(
            f"–ö—Ç–æ —Ç–∞–∫–æ–π \"{match.group(1)}\"? –ß—Ç–æ-—Ç–æ —è —Ç–∞–∫–∏—Ö –Ω–µ –∑–Ω–∞—é...", quote=False)
        return
    elif str(user_id) == str(context.bot.id):
        update.message.reply_text("ü§®", quote=True)
    elif (user_not_in_chat):
        update.message.reply_text("–¢—ã —Ö–æ—Ç–µ–ª –∫–æ–≥–æ-—Ç–æ —à–ª–µ–ø–Ω—É—Ç—å... –Ω–æ –µ–≥–æ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –≤ —á–∞—Ç–µ", quote=True)
    elif str(user_id) == str(update.message.from_user.id):
        update.message.reply_text("–•–æ—á–µ—à—å —à–ª–µ–ø–Ω—É—Ç—å —Å–∞–º —Å–µ–±—è? –°–¥–µ–ª–∞–π —ç—Ç–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏", quote=True)
    else:
        lucky_roll = random.random() < 0.05
        if not lucky_roll:
            stats[SS_MADE_ACTION_DATE] = datetime.now().strftime(DATETIME_FORMAT)
        stats[SS_TOTAL_SLAPS] = stats.get(SS_TOTAL_SLAPS, 0) + 1
        other_user_stats = get_slap_stats(user_id)
        other_user_stats[SS_HEALTH] = other_user_stats.get(SS_HEALTH, DEFAULT_HEALTH) - 1
        other_user_stats[SS_LAST_SLAPPED_DATE] = datetime.now().strftime(DATETIME_FORMAT)
        other_user_stats[SS_LAST_SLAPPED_BY_USERID] = update.message.from_user.id
        r.hset(SLAP_STATS_HASH, str(update.message.from_user.id), json.dumps(stats))
        r.hset(SLAP_STATS_HASH, str(user_id), json.dumps(other_user_stats))

        append = f"\n\n–£–î–ê–ß–ù–´–ô –®–õ–ï–ü–û–ö!\n<b>{update.message.from_user.username}</b> –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è!" if lucky_roll else ""
        update.message.reply_text(
            f"<b>{update.message.from_user.username}</b> —à–ª–µ–ø–Ω—É–ª @{redis_db.get_username_by_id(user_id)} –±–æ–ª—å—à–æ–π —Ä—ã–±–æ–π –ø–æ –ª–∏—Ü—É!{append}", quote=False, parse_mode=ParseMode.HTML)


def heal(update: Update, context):
    if (not in_whitelist(update)):
        return
    stats = get_slap_stats(update.message.from_user.id)
    if is_cooldown_active(stats.get(SS_MADE_ACTION_DATE)):
        update.message.reply_text(
            "–¢—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω /slap –∏–ª–∏ /heal –∑–∞ –¥–µ–Ω—å!", quote=True)
        return

    match = re.match(r'/[\S]+\s+(.+)', update.message.text)
    if (match == None):
        if update.message.reply_to_message is not None:
            user_id = update.message.reply_to_message.from_user.id
        else:
            update.message.reply_text("–ö–æ–≥–æ –±—É–¥–µ–º –ª–µ—á–∏—Ç—å?", quote=False)
            return
    else:
        user_id = parse_userid(match.group(1), context)
    user_not_in_chat = False
    try:
        user_not_in_chat = user_id is not None and context.bot.get_chat_member(update.message.chat_id, user_id).status == 'left'
    except:
        user_not_in_chat = True

    if not user_id:
        update.message.reply_text(
            f"–ö—Ç–æ —Ç–∞–∫–æ–π \"{match.group(1)}\"? –ß—Ç–æ-—Ç–æ —è —Ç–∞–∫–∏—Ö –Ω–µ –∑–Ω–∞—é...", quote=False)
        return
    elif str(user_id) == str(context.bot.id):
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –Ω–æ —è –≤–Ω–µ –∏–≥—Ä—ã :^", quote=True)
    elif (user_not_in_chat):
        update.message.reply_text("–¢—ã —Ö–æ—Ç–µ–ª –∫–æ–≥–æ-—Ç–æ –ø–æ–ª–µ—á–∏—Ç—å... –Ω–æ –µ–≥–æ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –≤ —á–∞—Ç–µ", quote=True)
    elif str(user_id) == str(update.message.from_user.id):
        update.message.reply_text("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ª–µ—á–∏—Ç—å —Å–∞–º —Å–µ–±—è!", quote=True)
    else:
        lucky_roll = random.random() < 0.05
        if not lucky_roll:
            stats[SS_MADE_ACTION_DATE] = datetime.now().strftime(DATETIME_FORMAT)
        stats[SS_TOTAL_HEALS] = stats.get(SS_TOTAL_HEALS, 0) + 1
        other_user_stats = get_slap_stats(user_id)
        other_user_stats[SS_HEALTH] = other_user_stats.get(SS_HEALTH, DEFAULT_HEALTH) + 1
        append = f"\n\n–£–î–ê–ß–ù–û–ï –õ–ï–ß–ï–ù–ò–ï!\n<b>{update.message.from_user.username}</b> –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è!" if lucky_roll else ""
        if is_cooldown_active(other_user_stats.get(SS_VULNERABLE_DATE)):
            other_user_stats.pop(SS_VULNERABLE_DATE, None)
            update.message.reply_text(f"<b>{update.message.from_user.username}</b> –ø–æ–≥–ª–∞–¥–∏–ª @{redis_db.get_username_by_id(user_id)} –ø–æ –≥–æ–ª–æ–≤–µ –∏ —Å–Ω—è–ª —É—è–∑–≤–∏–º–æ—Å—Ç—å!{append}", quote=False, parse_mode=ParseMode.HTML)
        else:
            update.message.reply_text(f"<b>{update.message.from_user.username}</b> –ø–æ–≥–ª–∞–¥–∏–ª @{redis_db.get_username_by_id(user_id)} –ø–æ –≥–æ–ª–æ–≤–µ.{append}", quote=False, parse_mode=ParseMode.HTML)

        r.hset(SLAP_STATS_HASH, str(update.message.from_user.id), json.dumps(stats))
        r.hset(SLAP_STATS_HASH, str(user_id), json.dumps(other_user_stats))
        

def parry(update: Update, context):
    if (not in_whitelist(update)):
        return

    stats = get_slap_stats(update.message.from_user.id)
    if is_cooldown_active(stats.get(SS_VULNERABLE_DATE)):
        update.message.reply_text("–¢—ã —É—è–∑–≤–∏–º –∏ –Ω–µ –º–æ–∂–µ—à—å –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å", quote=True)
        return

    last_slapped_date_str = stats.get(SS_LAST_SLAPPED_DATE)
    if last_slapped_date_str is None:
        update.message.reply_text("–ù–µ–∫–æ–≥–æ –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å", quote=True)
        return
    
    last_slapped_date = datetime.strptime(last_slapped_date_str, DATETIME_FORMAT)
    seconds_diff = (datetime.now() - last_slapped_date).total_seconds()
    if (seconds_diff <= 8):
        stats[SS_TOTAL_PERFECT_PARRIES] = stats.get(SS_TOTAL_PERFECT_PARRIES, 0) + 1
        stats[SS_HEALTH] = stats.get(SS_HEALTH, DEFAULT_HEALTH) + 1
        other_user_id = stats.get(SS_LAST_SLAPPED_BY_USERID, -1)
        other_user_stats = get_slap_stats(other_user_id)
        other_user_stats[SS_HEALTH] = other_user_stats.get(SS_HEALTH, DEFAULT_HEALTH) - 1
        other_user_stats[SS_TOTAL_SLAPS] = other_user_stats.get(SS_TOTAL_SLAPS, 0) - 1
        other_user_stats[SS_VULNERABLE_DATE] = datetime.now().strftime(DATETIME_FORMAT)
        update.message.reply_text(f"–ò–î–ï–ê–õ–¨–ù–û–ï –ü–ê–†–ò–†–û–í–ê–ù–ò–ï! <b>{update.message.from_user.username}</b> —Å–ø–∞—Ä–∏—Ä–æ–≤–∞–ª —à–ª–µ–ø–æ–∫ –æ—Ç @{redis_db.get_username_by_id(other_user_id)} –∏ —Å–¥–µ–ª–∞–ª –µ–≥–æ —É—è–∑–≤–∏–º—ã–º –Ω–∞ –¥–µ–Ω—å!", quote=False, parse_mode=ParseMode.HTML)
        stats.pop(SS_LAST_SLAPPED_DATE, None)
        stats.pop(SS_LAST_SLAPPED_BY_USERID, None)
        r.hset(SLAP_STATS_HASH, str(update.message.from_user.id), json.dumps(stats))
        r.hset(SLAP_STATS_HASH, str(other_user_id), json.dumps(other_user_stats))
    elif (seconds_diff <= 63):
        stats[SS_TOTAL_PARRIES] = stats.get(SS_TOTAL_PARRIES, 0) + 1
        stats[SS_HEALTH] = stats.get(SS_HEALTH, DEFAULT_HEALTH) + 1
        other_user_id = stats.get(SS_LAST_SLAPPED_BY_USERID, -1)
        other_user_stats = get_slap_stats(other_user_id)
        other_user_stats[SS_TOTAL_SLAPS] = other_user_stats.get(SS_TOTAL_SLAPS, 0) - 1
        update.message.reply_text(f"<b>{update.message.from_user.username}</b> —Å–ø–∞—Ä–∏—Ä–æ–≤–∞–ª —à–ª–µ–ø–æ–∫ –æ—Ç @{redis_db.get_username_by_id(other_user_id)}!", quote=False, parse_mode=ParseMode.HTML)
        stats.pop(SS_LAST_SLAPPED_DATE, None)
        stats.pop(SS_LAST_SLAPPED_BY_USERID, None)
        r.hset(SLAP_STATS_HASH, str(update.message.from_user.id), json.dumps(stats))
        r.hset(SLAP_STATS_HASH, str(other_user_id), json.dumps(other_user_stats))
    else:
        update.message.reply_text("–ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ", quote=True)
        stats.pop(SS_LAST_SLAPPED_DATE, None)
        stats.pop(SS_LAST_SLAPPED_BY_USERID, None)
        r.hset(SLAP_STATS_HASH, str(update.message.from_user.id), json.dumps(stats))


def slap_stats(update: Update, context):
    if (not in_whitelist(update)):
        return
    slappers_dict = {}
    for key in r.hgetall(SLAP_STATS_HASH):
        username = redis_db.get_username_by_id(key)
        slappers_dict[username] = get_slap_stats(key)
                
    if len(slappers_dict.keys()) == 0:
        update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ —à–ª–µ–ø–∞–ª, –ø–æ—ç—Ç–æ–º—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç", quote=False)
        return
    message = f"–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–ª–µ–ø—É–Ω–æ–≤.\n–ò–≥—Ä–æ–∫ [–®–ª–µ–ø-—Å—á–µ—Ç]  (–£—Å–ø–µ—à–Ω—ã–µ —à–ª–µ–ø–∫–∏ / –õ–µ—á–µ–Ω–∏—è / –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è / –ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)\n\n"
    i = 1
    for k, v in dict(sorted(slappers_dict.items(), key=lambda item: (item[1].get(SS_HEALTH, DEFAULT_HEALTH), item[1].get(SS_TOTAL_SLAPS, 0), item[1].get(SS_TOTAL_HEALS, 0), item[1].get(SS_TOTAL_PARRIES, 0), item[1].get(SS_TOTAL_PERFECT_PARRIES, 0)), reverse=True)).items():
        username_markdown = k
        username_markdown = f"<b>{username_markdown}</b>" if is_cooldown_active(v.get(SS_VULNERABLE_DATE)) else username_markdown
        username_markdown = f"<i>{username_markdown}</i>" if is_cooldown_active(v.get(SS_MADE_ACTION_DATE)) else username_markdown
        message += f"{i}. {username_markdown} [{v.get(SS_HEALTH, DEFAULT_HEALTH)}]  ({v.get(SS_TOTAL_SLAPS, 0)}/{v.get(SS_TOTAL_HEALS, 0)}/{v.get(SS_TOTAL_PARRIES, 0)}/{v.get(SS_TOTAL_PERFECT_PARRIES, 0)})\n"
        i += 1


    tomorrow = datetime.now() + timedelta(days=1)
    time_to_next = datetime.combine(tomorrow, time.min) - datetime.now()
    time_to_next_h, time_to_next_m = time_to_next.seconds // 3600, (time_to_next.seconds // 60) % 60
    message += f"–ù–æ–≤—ã–µ —à–ª–µ–ø–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ {time_to_next_h} —á. –∏ {time_to_next_m} –º."
    update.message.reply_text(f"{message}", quote=False, parse_mode=ParseMode.HTML)


def slap_rules(update: Update, context):
    if (not in_whitelist(update)):
        return
    rules = "–ü—Ä–∞–≤–∏–ª–∞ /slap –∏–≥—Ä—ã.\n" + \
            "–¢—ã –º–æ–∂–µ—à—å —à–ª–µ–ø–Ω—É—Ç—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ /slap –∏ —É–∫–∞–∑–∞–≤ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø–æ –µ–≥–æ username –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –Ω–∏–∫–Ω–µ–π–º—É). –≠—Ç–æ —Å–Ω–∏–∑–∏—Ç –µ–≥–æ —à–ª–µ–ø-—Å—á–µ—Ç –Ω–∞ 1.\n" + \
            "–ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∞ —à–ª–µ–ø–Ω—É–ª–∏, –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /parry —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —à–ª–µ–ø–æ–∫. –ï—Å–ª–∏ /parry –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–ª–µ–ø–∫–∞, —ç—Ç–∞ –∞—Ç–∞–∫–∞ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∏–≥—Ä–æ–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç —É—Ä–æ–Ω–∞.\n" + \
            "–û–¥–Ω–∞–∫–æ –µ—Å–ª–∏ /parry –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ, –∞ –∏–º–µ–Ω–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 8 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–ª–µ–ø–∫–∞, —Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –∞—Ç–∞–∫—É, –Ω–∞–Ω–µ—Å–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É 1 —É—Ä–æ–Ω –∏ —Å–¥–µ–ª–∞–µ—Ç –µ–≥–æ —É—è–∑–≤–∏–º—ã–º –Ω–∞ –¥–µ–Ω—å. –£—è–∑–≤–∏–º—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å —à–ª–µ–ø–∫–∏.\n" + \
            "–í–º–µ—Å—Ç–æ —à–ª–µ–ø–∫–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª–µ—á–∏—Ç—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ /heal –∏ —É–∫–∞–∑–∞–≤ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –≠—Ç–æ —É–≤–µ–ª–∏—á–∏—Ç –µ–≥–æ —à–ª–µ–ø-—Å—á–µ—Ç –Ω–∞ 1, –∞ —Ç–∞–∫–∂–µ —Å–Ω–∏–º–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å.\n" + \
            "–ó–∞ –¥–µ–Ω—å —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —à–ª–µ–ø–æ–∫ –∏–ª–∏ –ª–µ—á–µ–Ω–∏–µ, –Ω–æ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–π.\n" + \
            "–û—Ç–ø—Ä–∞–≤—å /slapstats, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–µ."
    update.message.reply_text(rules, quote=False)


def reset_my_slap(update: Update, context):
    if (not in_whitelist(update)):
        return
    stats = get_slap_stats(update.message.from_user.id)
    stats.pop(SS_MADE_ACTION_DATE, None)
    r.hset(SLAP_STATS_HASH, str(update.message.from_user.id), json.dumps(stats))
    update.message.reply_text("You can now /slap again. This is a debug command that should be removed on prod", quote=False)


def subscribe(u: Updater):
    u.dispatcher.add_handler(CommandHandler("slap", slap))
    u.dispatcher.add_handler(CommandHandler("heal", heal))
    u.dispatcher.add_handler(CommandHandler("parry", parry))
    u.dispatcher.add_handler(CommandHandler("slapstats", slap_stats))
    u.dispatcher.add_handler(CommandHandler("slaprules", slap_rules))
    u.dispatcher.add_handler(CommandHandler("resetmyslap", reset_my_slap))
    pass
